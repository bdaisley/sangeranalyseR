% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ClassSangerRead.R, R/Constructors.R
\docType{class}
\name{SangerRead-class}
\alias{SangerRead-class}
\alias{SangerRead}
\title{SangerRead}
\usage{
SangerRead(inputSource = "ABIF", readFeature = "", readFileName = "",
  fastaReadName = "", namesConversionCSV = NULL,
  geneticCode = GENETIC_CODE, TrimmingMethod = "M1",
  M1TrimmingCutoff = 1e-04, M2CutoffQualityScore = NULL,
  M2SlidingWindowSize = NULL, baseNumPerRow = 100,
  heightPerRow = 200, signalRatioCutoff = 0.33, showTrimmed = TRUE)
}
\arguments{
\item{inputSource}{The input source of the raw file. It must be \code{"ABIF"} or \code{"FASTA"}. The default value is \code{"ABIF"}.}

\item{readFeature}{The direction of the Sanger read. The value must be \code{"Forward Read"} or \code{"Reverse Read"}.}

\item{readFileName}{The filename of the target ABIF file.}

\item{fastaReadName}{If \code{inputSource} is \code{"FASTA"}, then this value has to be the name of the read inside the FASTA file; if \code{inputSource} is \code{"ABIF"}, then this value is \code{""} by default.}

\item{namesConversionCSV}{The file path to the CSV file that provides read names that follow the naming regulation. If \code{inputSource} is \code{"FASTA"}, then users need to prepare the csv file or make sure the original names inside FASTA file are valid; if \code{inputSource} is \code{"ABIF"}, then this value is \code{NULL} by default.}

\item{geneticCode}{Named character vector in the same format as \code{GENETIC_CODE} (the default), which represents the standard genetic code. This is the code with which the function will attempt to translate your DNA sequences. You can get an appropriate vector with the getGeneticCode() function. The default is the standard code.}

\item{TrimmingMethod}{TrimmingMethod The read trimming method for this SangerRead. The value must be \code{"M1"} (the default) or \code{'M2'}.}

\item{M1TrimmingCutoff}{The trimming cutoff for the Method 1. If \code{TrimmingMethod} is \code{"M1"}, then the default value is \code{0.0001}. Otherwise, the value must be \code{NULL}.}

\item{M2CutoffQualityScore}{The trimming cutoff quality score for the Method 2. If \code{TrimmingMethod} is \code{'M2'}, then the default value is \code{20}. Otherwise, the value must be \code{NULL}. It works with \code{M2SlidingWindowSize}.}

\item{M2SlidingWindowSize}{The trimming sliding window size for the Method 2. If \code{TrimmingMethod} is \code{'M2'}, then the default value is \code{10}. Otherwise, the value must be \code{NULL}. It works with \code{M2CutoffQualityScore}.}

\item{baseNumPerRow}{It defines maximum base pairs in each row. The default value is \code{100}.}

\item{heightPerRow}{It defines the height of each row in chromatogram. The default value is \code{200}.}

\item{signalRatioCutoff}{The ratio of the height of a secondary peak to a primary peak. Secondary peaks higher than this ratio are annotated. Those below the ratio are excluded. The default value is \code{0.33}.}

\item{showTrimmed}{The logical value storing whether to show trimmed base pairs in chromatogram. The default value is \code{TRUE}.}
}
\value{
SangerRead
}
\description{
An S4 class extending sangerseq S4 class which corresponds to a single ABIF file in Sanger sequencing.

the wrapper function for SangerRead
}
\section{Slots}{

\describe{
\item{\code{inputSource}}{The input source of the raw file. It must be \code{"ABIF"} or \code{"FASTA"}. The default value is \code{"ABIF"}.}

\item{\code{readFeature}}{The direction of the Sanger read. The value must be \code{"Forward Read"} or \code{"Reverse Read"}.}

\item{\code{readFileName}}{The filename of the target input file. It can be \code{"ABIF"} or \code{"FASTA"} file.}

\item{\code{fastaReadName}}{If \code{inputSource} is \code{"FASTA"}, then this value has to be the name of the read inside the FASTA file; if \code{inputSource} is \code{"ABIF"}, then this value is \code{NULL} by default.}

\item{\code{namesConversionCSV}}{The file path to the CSV file that provides read names that follow the naming regulation. If \code{inputSource} is \code{"FASTA"}, then users need to prepare the csv file or make sure the original names inside FASTA file are valid; if \code{inputSource} is \code{"ABIF"}, then this value is \code{NULL} by default.}

\item{\code{abifRawData}}{A S4 class containing all fields in the ABIF file. It is defined in sangerseqR package.}

\item{\code{QualityReport}}{A S4 class containing quality trimming related inputs and trimming results.}

\item{\code{ChromatogramParam}}{A S4 class containing chromatogram inputs.}

\item{\code{primaryAASeqS1}}{A polypeptide translated from primary DNA sequence starting from the first nucleic acid.}

\item{\code{primaryAASeqS2}}{A polypeptide translated from primary DNA sequence starting from the second nucleic acid.}

\item{\code{primaryAASeqS3}}{A polypeptide translated from primary DNA sequence starting from the third nucleic acid.}

\item{\code{geneticCode}}{Named character vector in the same format as \code{GENETIC_CODE} (the default), which represents the standard genetic code. This is the code with which the function will attempt to translate your DNA sequences. You can get an appropriate vector with the getGeneticCode() function. The default is the standard code.}

\item{\code{primarySeqRaw}}{The raw primary sequence from sangerseq class in sangerseqR package before base calling.}

\item{\code{secondarySeqRaw}}{The raw secondary sequence from sangerseq class in sangerseqR package before base calling.}

\item{\code{peakPosMatrixRaw}}{The raw peak position matrix from sangerseq class in sangerseqR package before base calling.}

\item{\code{peakAmpMatrixRaw}}{The raw peak amplitude matrix from sangerseq class in sangerseqR package before base calling.}
}}

\examples{
## Input From ABIF file format
# Forward Read
inputFilesPath <- system.file("extdata/", package = "sangeranalyseR")
A_chloroticaFFN <- file.path(inputFilesPath,
                             "Allolobophora_chlorotica",
                             "ACHLO",
                             "Achl_ACHLO006-09_1_F.ab1")
sangerReadF <- new("SangerRead",
                    inputSource           = "ABIF",
                    readFeature           = "Forward Read",
                    readFileName          = A_chloroticaFFN,
                    geneticCode           = GENETIC_CODE,
                    TrimmingMethod        = "M1",
                    M1TrimmingCutoff      = 0.0001,
                    M2CutoffQualityScore  = NULL,
                    M2SlidingWindowSize   = NULL,
                    baseNumPerRow         = 100,
                    heightPerRow          = 200,
                    signalRatioCutoff     = 0.33,
                    showTrimmed           = TRUE)

# Reverse Read
A_chloroticaRFN <- file.path(inputFilesPath,
                             "Allolobophora_chlorotica",
                             "ACHLO",
                             "Achl_ACHLO006-09_2_R.ab1")
sangerReadR <- new("SangerRead",
                    inputSource           = "ABIF",
                    readFeature           = "Reverse Read",
                    readFileName          = A_chloroticaRFN,
                    geneticCode           = GENETIC_CODE,
                    TrimmingMethod        = "M1",
                    M1TrimmingCutoff      = 0.0001,
                    M2CutoffQualityScore  = NULL,
                    M2SlidingWindowSize   = NULL,
                    baseNumPerRow         = 100,
                    heightPerRow          = 200,
                    signalRatioCutoff     = 0.33,
                    showTrimmed           = TRUE)


## Input From FASTA file format
# Forward Read
inputFilesPath <- system.file("extdata/", package = "sangeranalyseR")
A_chloroticaFFNfa <- file.path(inputFilesPath,
                               "fasta",
                               "SangerRead",
                               "Achl_ACHLO006-09_1_F.fa")
readNameFfa <- "Achl_ACHLO006-09_1_F"
namesConversionCSV <- file.path(inputFilesPath, "fasta", "SangerRead", "names_conversion_1.csv")
sangerReadFfa <- new("SangerRead",
                     inputSource        = "FASTA",
                     readFeature        = "Forward Read",
                     readFileName       = A_chloroticaFFNfa,
                     fastaReadName      = readNameFfa,
                     namesConversionCSV = namesConversionCSV,
                     geneticCode        = GENETIC_CODE)
# Reverse Read
A_chloroticaRFNfa <- file.path(inputFilesPath,
                               "fasta",
                               "SangerRead",
                               "Achl_ACHLO006-09_2_R.fa")
readNameRfa <- "Achl_ACHLO006-09_2_R"
namesConversionCSV <- file.path(inputFilesPath, "fasta", "SangerRead", "names_conversion_2.csv")
sangerReadRfa <- new("SangerRead",
                     inputSource   = "FASTA",
                     readFeature   = "Reverse Read",
                     readFileName  = A_chloroticaRFNfa,
                     fastaReadName = readNameRfa,
                     namesConversionCSV = namesConversionCSV,
                     geneticCode   = GENETIC_CODE)
inputFilesPath <- system.file("extdata/", package = "sangeranalyseR")
A_chloroticaFdFN <- file.path(inputFilesPath,
                              "Allolobophora_chlorotica",
                              "ACHLO",
                              "Achl_ACHLO006-09_1_F.ab1")
sangerRead <- SangerRead(
                   inputSource           = "ABIF",
                   readFeature           = "Forward Read",
                   readFileName          = A_chloroticaFdFN,
                   geneticCode           = GENETIC_CODE,
                   TrimmingMethod        = "M1",
                   M1TrimmingCutoff      = 0.0001,
                   M2CutoffQualityScore  = NULL,
                   M2SlidingWindowSize   = NULL,
                   baseNumPerRow         = 100,
                   heightPerRow          = 200,
                   signalRatioCutoff     = 0.33,
                   showTrimmed           = TRUE)
}
\author{
Kuan-Hao Chao

Kuan-Hao Chao
}
