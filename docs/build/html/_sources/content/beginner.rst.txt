Beginner Guide
==============

First, please install sangeranalyseR and load it into your R console. If you haven't finished the above steps, please read :ref:`Getting Start` page first.

|

Step 1: Input files preparation
-------------------------------
sangeranalyseR takes **AB1** files as input and constructs contigs for those with the same contig name. Then, all the contigs will be aligned and a phylogenetic tree will be generated. We first explain how users should organize their files before running sangeranalyseR.

First, users need to prepare a directory and put all their **AB1** files inside it. The files should follow the regulation in the note below:

.. note::

  * All the input files must have **AB1** as its file extension.
  * The reads that belong to the same contig should have the same contig name.
  * Forward or reverse direction needs to be specified in the filename.

There are three parameters, :code:`parentDirectory`, :code:`suffixForwardRegExp`, and :code:`suffixReverseRegExp`, that users need to provide so that program can automatically group all **AB1** files. To be clearer, let's have an example.

.. _SangerAlignment_file_structure_beginner:
.. figure::  ../image/SangerAlignment_file_structure_beginner.png
   :align:   center
   :scale:   50 %

   Figure 1. Input ab1 files inside the parent directory, :code:`./tmp/`.


:ref:`Figure_1<SangerAlignment_file_structure_beginner>` shows the directory that users need to prepare and the file naming convention. Here, we explain the three parameters in this example.

* :code:`parentDirectory`: It is the directory that contains all the **AB1** files. In this example, it is :code:`./tmp/`

* :code:`suffixForwardRegExp`: All the reads that are in forward direction have to contain this in their filename suffix. In this example, its value is :code:`_F.ab1`.

* :code:`suffixReverseRegExp`: Same as forward read, all the reads that are in reverse direction have to contain this in their filename suffix. In this example, its value is :code:`_R.ab1`.

All files inside the :code:`parentDirectory` do not need to be in the same layer. sangeranalyseR will recursively search all the directories inside :code:`parentDirectory` and find all files that end with **AB1** and match the forward or reverse suffix. Files with the same contig name will be categorized in the same group and be aligned into a contig. Therefore, it is very important to make sure that filenames are correctly and systematically named. In this example, there are four contigs that will be detected: :code:`ACHLO006-09[LCO1490_t1,HCO2198_t1]`, :code:`ACHLO007-09[LCO1490_t1,HCO2198_t1]`, :code:`RBNII396-13[C_LepFolF,C_LepFolR]` and :code:`RBNII397-13[C_LepFolF,C_LepFolR]`.

|

Step 2: S4 instance creation
----------------------------
After preparing the input directory, we can now create a *SangerAlignment* S4 instance by running one-line function below.

.. code-block:: R

   sangerAlignment <- SangerAlignment(parentDirectory     = "./tmp/",
                                      suffixForwardRegExp = "_F.ab1",
                                      suffixReverseRegExp = "_R.ab1")

One thing to pay attention to is that your current working directory need to be at the same level of :code:`tmp` directory so that you can directly use :code:`./tmp/`. Or otherwise, you need to use the absolute path which might look like :code:`/path/to/your/tmp`.

|

Step 3: Launching Shiny App
---------------------------
You can launch an interactive Shiny app in your local computer by running :code:`launchAppSA` function.

.. code-block:: R

   launchAppSA(sangerAlignment)

.. _SangerAlignment_shiny_app:
.. figure::  ../image/SangerAlignment_shiny_app.png
   :align:   center

   Figure 2. *SangerAlignment* Shiny app user interface.

:ref:`Figure_2<SangerAlignment_shiny_app>` shows how the Shiny app looks like. On the left-hand side of :ref:`Figure_2<SangerAlignment_shiny_app>`, there is a navigation menu that users can click inside to each contig and each single read to get more details.

|

Step 4: Writing FASTA file
--------------------------
The following function can write the *SangerAlignment* S4 instance to a FASTA file.

.. code-block:: R

   writeFastaSA(sangerAlignment)

|

Step 5: Generating report
-------------------------
Last but not least, it is important to store all results in a report for future reference. A detailed report will be generated by running the following one-line function. :ref:`Figure_3<SangerAlignment_alignment_result>` and :ref:`Figure_4<SangerAlignment_tree>` show the main results of *SangerAlignment*.

.. code-block:: R

   generateReportSA(sangerAlignment)

.. _SangerAlignment_alignment_result:
.. figure::  ../image/SangerAlignment_alignment_result.png
   :align:   center

   Figure 3. Alignment result of all contigs in the *SangerAlignment* instance.


.. _SangerAlignment_tree:
.. figure::  ../image/SangerAlignment_tree.png
   :align:   center
   :scale:   30 %

   Figure 4. Phylogenetic trees with contigs as the leaf nodes.

|


What's next ?
-------------
Congratulation, you have finished the :ref:`Beginner Guide`. There are three levels of Sanger sequencing analysis which are *SangerRead*, *SangerContig* and *SangerAlignment*. Users can start the data analysis in each level now. The main input file format to create *SangerRead* instance is **AB1**; however, we also allow users to run sangeranalyseR with **FASTA** file as input with some limitations.

If you want to start the analysis from **AB1** files, please choose the analysis level and read the following three links.

* :ref:`Advanced User Guide - *SangerRead* (**AB1**)`

* :ref:`Advanced User Guide - *SangerContig* (**AB1**)`

* :ref:`Advanced User Guide - *SangerAlignment* (**AB1**)`


If you want to start the analysis from **FASTA** files, please choose the analysis level and read the following three links.

* :ref:`Advanced User Guide - *SangerRead* (**FASTA**)`

* :ref:`Advanced User Guide - *SangerContig* (**FASTA**)`

* :ref:`Advanced User Guide - *SangerAlignment* (**FASTA**)`
